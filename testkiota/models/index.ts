/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a DeliveryBoxPartsInfoModel
 */
export function createDeliveryBoxPartsInfoModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDeliveryBoxPartsInfoModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a FilamentBoxModel
 */
export function createFilamentBoxModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFilamentBoxModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a FilamentBrandModel
 */
export function createFilamentBrandModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFilamentBrandModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a FilamentModel
 */
export function createFilamentModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFilamentModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a OrderModel
 */
export function createOrderModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoOrderModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a OrderPartModel
 */
export function createOrderPartModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoOrderPartModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a PartItemModel
 */
export function createPartItemModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPartItemModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a PartModel
 */
export function createPartModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPartModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a PrintRequirementModel
 */
export function createPrintRequirementModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPrintRequirementModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a UserModel
 */
export function createUserModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUserModel;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a UserShippingInfoModel
 */
export function createUserShippingInfoModelFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUserShippingInfoModel;
}
export interface DeliveryBoxPartsInfoModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The count property
     */
    count?: number;
    /**
     * The deliveryBoxType property
     */
    deliveryBoxType?: DeliveryBoxType;
    /**
     * The id property
     */
    id?: string;
    /**
     * The orderPartBookingStatus property
     */
    orderPartBookingStatus?: OrderPartBookingStatus;
    /**
     * The orderPartID property
     */
    orderPartID?: string;
    /**
     * The shippingNumber property
     */
    shippingNumber?: string;
    /**
     * The userID property
     */
    userID?: string;
}
export type DeliveryBoxType = (typeof DeliveryBoxTypeObject)[keyof typeof DeliveryBoxTypeObject];
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoDeliveryBoxPartsInfoModel(deliveryBoxPartsInfoModel: Partial<DeliveryBoxPartsInfoModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "count": n => { deliveryBoxPartsInfoModel.count = n.getNumberValue(); },
        "deliveryBoxType": n => { deliveryBoxPartsInfoModel.deliveryBoxType = n.getEnumValue<DeliveryBoxType>(DeliveryBoxTypeObject); },
        "id": n => { deliveryBoxPartsInfoModel.id = n.getStringValue(); },
        "orderPartBookingStatus": n => { deliveryBoxPartsInfoModel.orderPartBookingStatus = n.getEnumValue<OrderPartBookingStatus>(OrderPartBookingStatusObject); },
        "orderPartID": n => { deliveryBoxPartsInfoModel.orderPartID = n.getStringValue(); },
        "shippingNumber": n => { deliveryBoxPartsInfoModel.shippingNumber = n.getStringValue(); },
        "userID": n => { deliveryBoxPartsInfoModel.userID = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoFilamentBoxModel(filamentBoxModel: Partial<FilamentBoxModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "filamentId": n => { filamentBoxModel.filamentId = n.getStringValue(); },
        "lenght": n => { filamentBoxModel.lenght = n.getNumberValue(); },
        "price": n => { filamentBoxModel.price = n.getNumberValue(); },
        "weight": n => { filamentBoxModel.weight = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoFilamentBrandModel(filamentBrandModel: Partial<FilamentBrandModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { filamentBrandModel.id = n.getStringValue(); },
        "title": n => { filamentBrandModel.title = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoFilamentModel(filamentModel: Partial<FilamentModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "brandId": n => { filamentModel.brandId = n.getStringValue(); },
        "filamentType": n => { filamentModel.filamentType = n.getEnumValue<FilamentType>(FilamentTypeObject); },
        "id": n => { filamentModel.id = n.getStringValue(); },
        "title": n => { filamentModel.title = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoOrderModel(orderModel: Partial<OrderModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "dueDate": n => { orderModel.dueDate = n.getDateValue(); },
        "id": n => { orderModel.id = n.getStringValue(); },
        "status": n => { orderModel.status = n.getEnumValue<OrderModel_status>(OrderModel_statusObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoOrderPartModel(orderPartModel: Partial<OrderPartModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { orderPartModel.id = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoPartItemModel(partItemModel: Partial<PartItemModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { partItemModel.id = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoPartModel(partModel: Partial<PartModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { partModel.id = n.getStringValue(); },
        "itemID": n => { partModel.itemID = n.getStringValue(); },
        "stlUrl": n => { partModel.stlUrl = n.getStringValue(); },
        "title": n => { partModel.title = n.getStringValue(); },
        "weight": n => { partModel.weight = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoPrintRequirementModel(printRequirementModel: Partial<PrintRequirementModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "filamentType": n => { printRequirementModel.filamentType = n.getStringValue(); },
        "id": n => { printRequirementModel.id = n.getStringValue(); },
        "partID": n => { printRequirementModel.partID = n.getStringValue(); },
        "requirementsUrl": n => { printRequirementModel.requirementsUrl = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoUserModel(userModel: Partial<UserModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { userModel.id = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoUserShippingInfoModel(userShippingInfoModel: Partial<UserShippingInfoModel> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { userShippingInfoModel.id = n.getStringValue(); },
    }
}
export interface FilamentBoxModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The filamentId property
     */
    filamentId?: string;
    /**
     * The lenght property
     */
    lenght?: number;
    /**
     * The price property
     */
    price?: number;
    /**
     * The weight property
     */
    weight?: number;
}
export interface FilamentBrandModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The id property
     */
    id?: string;
    /**
     * The title property
     */
    title?: string;
}
export interface FilamentModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The brandId property
     */
    brandId?: string;
    /**
     * The filamentType property
     */
    filamentType?: FilamentType;
    /**
     * The id property
     */
    id?: string;
    /**
     * The title property
     */
    title?: string;
}
export type FilamentType = (typeof FilamentTypeObject)[keyof typeof FilamentTypeObject];
export interface OrderModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The dueDate property
     */
    dueDate?: Date;
    /**
     * The id property
     */
    id?: string;
    /**
     * The status property
     */
    status?: OrderModel_status;
}
export type OrderModel_status = (typeof OrderModel_statusObject)[keyof typeof OrderModel_statusObject];
export type OrderPartBookingStatus = (typeof OrderPartBookingStatusObject)[keyof typeof OrderPartBookingStatusObject];
export interface OrderPartModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The id property
     */
    id?: string;
}
export interface PartItemModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The id property
     */
    id?: string;
}
export interface PartModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The id property
     */
    id?: string;
    /**
     * The itemID property
     */
    itemID?: string;
    /**
     * The stlUrl property
     */
    stlUrl?: string;
    /**
     * The title property
     */
    title?: string;
    /**
     * The weight property
     */
    weight?: string;
}
export interface PrintRequirementModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The filamentType property
     */
    filamentType?: string;
    /**
     * The id property
     */
    id?: string;
    /**
     * The partID property
     */
    partID?: string;
    /**
     * The requirementsUrl property
     */
    requirementsUrl?: string;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeDeliveryBoxPartsInfoModel(writer: SerializationWriter, deliveryBoxPartsInfoModel: Partial<DeliveryBoxPartsInfoModel> | undefined = {}) : void {
    writer.writeNumberValue("count", deliveryBoxPartsInfoModel.count);
    writer.writeEnumValue<DeliveryBoxType>("deliveryBoxType", deliveryBoxPartsInfoModel.deliveryBoxType);
    writer.writeStringValue("id", deliveryBoxPartsInfoModel.id);
    writer.writeEnumValue<OrderPartBookingStatus>("orderPartBookingStatus", deliveryBoxPartsInfoModel.orderPartBookingStatus);
    writer.writeStringValue("orderPartID", deliveryBoxPartsInfoModel.orderPartID);
    writer.writeStringValue("shippingNumber", deliveryBoxPartsInfoModel.shippingNumber);
    writer.writeStringValue("userID", deliveryBoxPartsInfoModel.userID);
    writer.writeAdditionalData(deliveryBoxPartsInfoModel.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeFilamentBoxModel(writer: SerializationWriter, filamentBoxModel: Partial<FilamentBoxModel> | undefined = {}) : void {
    writer.writeStringValue("filamentId", filamentBoxModel.filamentId);
    writer.writeNumberValue("lenght", filamentBoxModel.lenght);
    writer.writeNumberValue("price", filamentBoxModel.price);
    writer.writeNumberValue("weight", filamentBoxModel.weight);
    writer.writeAdditionalData(filamentBoxModel.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeFilamentBrandModel(writer: SerializationWriter, filamentBrandModel: Partial<FilamentBrandModel> | undefined = {}) : void {
    writer.writeStringValue("id", filamentBrandModel.id);
    writer.writeStringValue("title", filamentBrandModel.title);
    writer.writeAdditionalData(filamentBrandModel.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeFilamentModel(writer: SerializationWriter, filamentModel: Partial<FilamentModel> | undefined = {}) : void {
    writer.writeStringValue("brandId", filamentModel.brandId);
    writer.writeEnumValue<FilamentType>("filamentType", filamentModel.filamentType);
    writer.writeStringValue("id", filamentModel.id);
    writer.writeStringValue("title", filamentModel.title);
    writer.writeAdditionalData(filamentModel.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeOrderModel(writer: SerializationWriter, orderModel: Partial<OrderModel> | undefined = {}) : void {
    writer.writeDateValue("dueDate", orderModel.dueDate);
    writer.writeStringValue("id", orderModel.id);
    writer.writeEnumValue<OrderModel_status>("status", orderModel.status);
    writer.writeAdditionalData(orderModel.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeOrderPartModel(writer: SerializationWriter, orderPartModel: Partial<OrderPartModel> | undefined = {}) : void {
    writer.writeStringValue("id", orderPartModel.id);
    writer.writeAdditionalData(orderPartModel.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializePartItemModel(writer: SerializationWriter, partItemModel: Partial<PartItemModel> | undefined = {}) : void {
    writer.writeStringValue("id", partItemModel.id);
    writer.writeAdditionalData(partItemModel.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializePartModel(writer: SerializationWriter, partModel: Partial<PartModel> | undefined = {}) : void {
    writer.writeStringValue("id", partModel.id);
    writer.writeStringValue("itemID", partModel.itemID);
    writer.writeStringValue("stlUrl", partModel.stlUrl);
    writer.writeStringValue("title", partModel.title);
    writer.writeStringValue("weight", partModel.weight);
    writer.writeAdditionalData(partModel.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializePrintRequirementModel(writer: SerializationWriter, printRequirementModel: Partial<PrintRequirementModel> | undefined = {}) : void {
    writer.writeStringValue("filamentType", printRequirementModel.filamentType);
    writer.writeStringValue("id", printRequirementModel.id);
    writer.writeStringValue("partID", printRequirementModel.partID);
    writer.writeStringValue("requirementsUrl", printRequirementModel.requirementsUrl);
    writer.writeAdditionalData(printRequirementModel.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeUserModel(writer: SerializationWriter, userModel: Partial<UserModel> | undefined = {}) : void {
    writer.writeStringValue("id", userModel.id);
    writer.writeAdditionalData(userModel.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeUserShippingInfoModel(writer: SerializationWriter, userShippingInfoModel: Partial<UserShippingInfoModel> | undefined = {}) : void {
    writer.writeStringValue("id", userShippingInfoModel.id);
    writer.writeAdditionalData(userShippingInfoModel.additionalData);
}
export interface UserModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The id property
     */
    id?: string;
}
export interface UserShippingInfoModel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The id property
     */
    id?: string;
}
export const DeliveryBoxTypeObject = {
    NP5kg: "NP5kg",
    NP2kgSquare: "NP2kgSquare",
    Monofilament: "Monofilament",
    Plexiwire: "Plexiwire",
    Geeetech: "Geeetech",
} as const;
export const FilamentTypeObject = {
    PLA: "PLA",
    PLAHS: "PLAHS",
    PETG: "PETG",
    RPETG: "RPETG",
} as const;
export const OrderModel_statusObject = {
    Active: "Active",
    Cancelled: "Cancelled",
    Completed: "Completed",
} as const;
export const OrderPartBookingStatusObject = {
    Active: "Active",
    Cancelled: "Cancelled",
} as const;
/* tslint:enable */
/* eslint-enable */
