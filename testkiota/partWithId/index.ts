/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createPartModelFromDiscriminatorValue, serializePartModel, type PartModel } from '../models/';
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /Part?id={id}
 */
export interface PartWithIdRequestBuilder extends BaseRequestBuilder<PartWithIdRequestBuilder> {
    /**
     * Delete by ID
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of ArrayBuffer
     */
     delete(requestConfiguration?: RequestConfiguration<PartWithIdRequestBuilderDeleteQueryParameters> | undefined) : Promise<ArrayBuffer | undefined>;
    /**
     * Get by ID
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of PartModel
     */
     get(requestConfiguration?: RequestConfiguration<PartWithIdRequestBuilderGetQueryParameters> | undefined) : Promise<PartModel | undefined>;
    /**
     * Update by ID
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of ArrayBuffer
     */
     put(body: PartModel, requestConfiguration?: RequestConfiguration<PartWithIdRequestBuilderPutQueryParameters> | undefined) : Promise<ArrayBuffer | undefined>;
    /**
     * Delete by ID
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<PartWithIdRequestBuilderDeleteQueryParameters> | undefined) : RequestInformation;
    /**
     * Get by ID
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<PartWithIdRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update by ID
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPutRequestInformation(body: PartModel, requestConfiguration?: RequestConfiguration<PartWithIdRequestBuilderPutQueryParameters> | undefined) : RequestInformation;
}
/**
 * Delete by ID
 */
export interface PartWithIdRequestBuilderDeleteQueryParameters {
    id?: string;
}
/**
 * Get by ID
 */
export interface PartWithIdRequestBuilderGetQueryParameters {
    id?: string;
}
/**
 * Update by ID
 */
export interface PartWithIdRequestBuilderPutQueryParameters {
    id?: string;
}
/**
 * Metadata for all the requests in the request builder.
 */
export const PartWithIdRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        adapterMethodName: "sendPrimitiveAsync",
        responseBodyFactory:  "ArrayBuffer",
    },
    get: {
        responseBodyContentType: "application/json",
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createPartModelFromDiscriminatorValue,
    },
    put: {
        adapterMethodName: "sendPrimitiveAsync",
        responseBodyFactory:  "ArrayBuffer",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePartModel,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const PartWithIdRequestBuilderUriTemplate = "{+baseurl}/Part?id={id}?id={id}";
/* tslint:enable */
/* eslint-enable */
